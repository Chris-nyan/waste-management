generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String          @id @default(cuid())
  name          String
  email         String          @unique
  password      String
  role          UserRole        @default(USER)
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  userProfile   UserProfile?
  vendorProfile VendorProfile?
  bookings      Booking[]
  notifications Notification[]
}

model UserProfile {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VendorProfile {
  id             String    @id @default(cuid())
  user           User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         String    @unique
  businessName   String
  phone          String
  
  // New structured address fields
  street         String
  district       String // New field for district/sub-district
  city           String // This will represent the Province/State
  zipCode        String
  country        String

  operatingHours String    // Now a required field
  isAvailable    Boolean   @default(true)
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  bookings       Booking[]
}

model Booking {
  id              String         @id @default(cuid())
  user            User           @relation(fields: [userId], references: [id])
  userId          String
  vendor          VendorProfile  @relation(fields: [vendorId], references: [id])
  vendorId        String
  pickupTime      DateTime
  pickupLocation  String
  status          BookingStatus  @default(PENDING)
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  notifications   Notification[]
}

model Notification {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  booking   Booking  @relation(fields: [bookingId], references: [id])
  bookingId String
  message   String
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
}

enum UserRole {
  USER
  VENDOR
  ADMIN
}

enum BookingStatus {
  PENDING
  CONFIRMED
  COMPLETED
  CANCELLED
}
